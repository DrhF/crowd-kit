__all__ = [
    'glue_similarity',
    'HRRASA',
    'TextHRRASA',
]
from pandas.core.frame import DataFrame
from pandas.core.series import Series
from toloka.client.base_embedding_aggregator import BaseEmbeddingAggregator
from typing import Callable

def glue_similarity(hyp, ref): ...


class HRRASA(BaseEmbeddingAggregator):
    """Hybrid Reliability and Representation Aware Sequence Aggregation
    Jiyi Li. 2020.
    Crowdsourced Text Sequence Aggregation based on Hybrid Reliability and Representation.
    Proceedings of the 43rd International ACM SIGIR Conference on Research and Development
    in Information Retrieval (SIGIR ’20), July 25–30, 2020, Virtual Event, China. ACM, New York, NY, USA,

    https://doi.org/10.1145/3397271.3401239
    """

    def __init__(
        self,
        n_iter: int = 100,
        lambda_emb: float = ...,
        lambda_out: float = ...,
        alpha: float = ...,
        calculate_ranks: bool = False,
        output_similarity=...
    ) -> None:
        """Method generated by attrs for class HRRASA.
        """
        ...

    def fit(
        self,
        data: DataFrame,
        true_embeddings: Series = None
    ) -> 'HRRASA':
        """Args:
            data (DataFrame): Performers' outputs with their embeddings
                A pandas.DataFrame containing `task`, `performer`, `output` and `embedding` columns.
            true_embeddings (Series): Tasks' embeddings
                A pandas.Series indexed by `task` and holding corresponding embeddings.
        Returns:
            HRRASA: self
        """
        ...

    def fit_predict(
        self,
        data: DataFrame,
        true_embeddings: Series = None
    ) -> DataFrame:
        """Args:
            data (DataFrame): Performers' outputs with their embeddings
                A pandas.DataFrame containing `task`, `performer`, `output` and `embedding` columns.
            true_embeddings (Series): Tasks' embeddings
                A pandas.Series indexed by `task` and holding corresponding embeddings.
        Returns:
            DataFrame: Tasks' most likely true labels
                A pandas.Series indexed by `task` such that `labels.loc[task]`
                is the tasks's most likely true label.
        """
        ...

    def fit_predict_scores(
        self,
        data: DataFrame,
        true_embeddings: Series = None
    ) -> DataFrame:
        """Args:
            data (DataFrame): Performers' outputs with their embeddings
                A pandas.DataFrame containing `task`, `performer`, `output` and `embedding` columns.
            true_embeddings (Series): Tasks' embeddings
                A pandas.Series indexed by `task` and holding corresponding embeddings.
        Returns:
            DataFrame: Tasks' label scores
                A pandas.DataFrame indexed by `task` such that `result.loc[task, label]`
                is the score of `label` for `task`.
        """
        ...

    n_iter: int
    lambda_emb: float
    lambda_out: float
    alpha: float
    calculate_ranks: bool


class TextHRRASA:
    def __init__(
        self,
        encoder: Callable,
        n_iter: int = 100,
        lambda_emb: float = ...,
        lambda_out: float = ...,
        alpha: float = ...,
        calculate_ranks: bool = False,
        output_similarity: Callable = ...
    ): ...

    def fit_predict(
        self,
        data: DataFrame,
        true_objects: Series = None
    ) -> DataFrame:
        """Args:
            data (DataFrame): Performers' outputs
                A pandas.DataFrame containing `task`, `performer` and `output` columns.
            true_objects (Series): Tasks' ground truth labels
                A pandas.Series indexed by `task` such that `labels.loc[task]`
                is the tasks's ground truth label.

        Returns:
            DataFrame: Tasks' most likely true labels
                A pandas.Series indexed by `task` such that `labels.loc[task]`
                is the tasks's most likely true label.
        """
        ...

    def fit_predict_scores(
        self,
        data: DataFrame,
        true_objects: Series = None
    ) -> DataFrame:
        """Args:
            data (DataFrame): Performers' outputs
                A pandas.DataFrame containing `task`, `performer` and `output` columns.
            true_objects (Series): Tasks' ground truth labels
                A pandas.Series indexed by `task` such that `labels.loc[task]`
                is the tasks's ground truth label.

        Returns:
            DataFrame: Tasks' label scores
                A pandas.DataFrame indexed by `task` such that `result.loc[task, label]`
                is the score of `label` for `task`.
        """
        ...
